generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./dbml"
  outputName = "valor-admmin.dbml"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ActivityEntity {
  id          String           @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime         @default(now()) @db.DateTime(6)
  updatedDate DateTime         @updatedAt
  deletedDate DateTime?        @db.DateTime(6)
  timestamp   DateTime         @db.DateTime(0)
  type        String           @db.VarChar(255)
  name        String           @db.VarChar(255)
  avatar      String           @db.VarChar(255)
  url         String?          @db.VarChar(255)
  body        String?          @db.LongText
  reactions   Json?            @db.Json
  profile_id  String?          @db.VarChar(36)
  parentId    String?          @db.VarChar(36)
  parent      ActivityEntity?  @relation("activity_entityToactivity_entity_parentId", fields: [parentId], references: [id])
  profile     ProfileEntity?   @relation("profileEntity", fields: [profile_id], references: [id])
  children    ActivityEntity[] @relation("activity_entityToactivity_entity_parentId")
}

model CommentEntity {
  id             String            @id @default(uuid()) @db.VarChar(36)
  createdDate    DateTime          @default(now()) @db.DateTime(6)
  updatedDate    DateTime          @updatedAt
  deletedDate    DateTime?         @db.DateTime(6)
  author_id      String            @db.VarChar(36)
  author         UserEntity        @relation("commentAuthor", fields: [author_id], references: [id])
  body           String            @db.LongText
  reactions      Json?             @db.Json
  project_id     String?           @db.VarChar(36)
  parentId       String?           @db.VarChar(36)
  storyId        String?           @db.VarChar(36)
  story          SocialStory?      @relation("storyComments", fields: [storyId], references: [id])
  CommentEntity  CommentEntity?    @relation("comment_entityTocomment_entity_parentId", fields: [parentId], references: [id])
  ProjectsEntity ProjectsEntity?   @relation("projectComments", fields: [project_id], references: [id])
  children       CommentEntity[]   @relation("comment_entityTocomment_entity_parentId")
  userLike       CommentUserLike[] @relation("commentUserLikeComment")
}

model CommentUserLike {
  id          String    @id @default(uuid()) @db.VarChar(36)
  commentId   String    @db.VarChar(36)
  userId      String    @db.VarChar(36)
  createdDate DateTime  @default(now()) @db.DateTime(6)
  deletedDate DateTime? @db.DateTime(6)

  comment CommentEntity @relation("commentUserLikeComment", fields: [commentId], references: [id])
  user    UserEntity    @relation("commentUserLikeUser", fields: [userId], references: [id])

  @@unique([commentId, userId])
}

model ProfileEntity {
  id             String                      @id @default(uuid()) @db.VarChar(36)
  createdDate    DateTime                    @default(now()) @db.DateTime(6)
  updatedDate    DateTime                    @updatedAt
  deletedDate    DateTime?                   @db.DateTime(6)
  name           String                      @db.VarChar(255)
  avatar         MediaAsset?                 @relation("profileImage")
  username       String                      @unique @db.VarChar(255)
  user           UserEntity                  @relation("userProfile", fields: [username], references: [username])
  title          String?                     @db.VarChar(255)
  location       String?                     @db.VarChar(255)
  from           String?                     @db.VarChar(255)
  city           String?                     @db.VarChar(255)
  zip            String?                     @db.VarChar(255)
  language       String?                     @db.VarChar(255)
  locale         String?                     @db.VarChar(255)
  timeZone       String?                     @db.VarChar(255)
  bio            String?                     @db.VarChar(255)
  address        String?                     @db.VarChar(255)
  employers      ProfileEmployerEntity[]
  socialMedia    SocialMediaMatchingEntity[]
  skills         ProfileSkillsEntity[]
  activityEntity ActivityEntity[]            @relation("profileEntity")
}

model ProfileSkillsEntity {
  id          String        @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime      @default(now()) @db.DateTime(6)
  updatedDate DateTime      @updatedAt
  deletedDate DateTime?     @db.DateTime(6)
  profileId   String        @db.VarChar(36)
  profile     ProfileEntity @relation(fields: [profileId], references: [id])
  skillsId    String        @db.VarChar(36)
  skill       SkillsEntity  @relation(fields: [skillsId], references: [id])
}

model SkillsEntity {
  id          String                @id @default(uuid()) @db.VarChar(36)
  name        String                @unique @db.VarChar(255)
  createdDate DateTime              @default(now()) @db.DateTime(6)
  updatedDate DateTime              @updatedAt
  deletedDate DateTime?             @db.DateTime(6)
  profiles    ProfileSkillsEntity[]
}

model SocialMediaEntity {
  id            String                      @id @default(uuid()) @db.VarChar(36)
  createdDate   DateTime                    @default(now()) @db.DateTime(6)
  updatedDate   DateTime                    @updatedAt
  deletedDate   DateTime?                   @db.DateTime(6)
  icon          String                      @db.VarChar(255)
  baseUrl       String                      @db.VarChar(255)
  name          String                      @db.VarChar(255)
  platformUsers SocialMediaMatchingEntity[]
}

model SocialMediaMatchingEntity {
  id             String    @id @default(uuid()) @db.VarChar(36)
  createdDate    DateTime  @default(now()) @db.DateTime(6)
  updatedDate    DateTime  @updatedAt
  deletedDate    DateTime? @db.DateTime(6)
  profileId      String?   @db.VarChar(36)
  socialMediaId  String    @db.VarChar(36)
  socialMediaUrl String    @db.VarChar(255)
  employerId     String?   @db.VarChar(36)

  profile     ProfileEntity?    @relation(fields: [profileId], references: [id])
  socialMedia SocialMediaEntity @relation(fields: [socialMediaId], references: [id])
  employer    EmployerEntity?   @relation(fields: [employerId], references: [id])
}

model EmployerEntity {
  id          String                      @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime                    @default(now()) @db.DateTime(6)
  updatedDate DateTime                    @updatedAt
  deletedDate DateTime?                   @db.DateTime(6)
  name        String?                     @db.VarChar(255)
  url         String?                     @db.VarChar(255)
  avatar      String?                     @db.VarChar(255)
  profiles    ProfileEmployerEntity[]
  socialMedia SocialMediaMatchingEntity[]
}

model ProfileEmployerEntity {
  id          String         @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime       @default(now()) @db.DateTime(6)
  updatedDate DateTime       @updatedAt
  deletedDate DateTime?      @db.DateTime(6)
  current     Boolean?       @db.TinyInt
  employerId  String         @db.VarChar(36)
  employer    EmployerEntity @relation(fields: [employerId], references: [id])
  profileId   String         @db.VarChar(36)
  profile     ProfileEntity  @relation(fields: [profileId], references: [id])
}

enum ProjectStatus {
  IN_PROGRESS
  FINISHED
  ON_HOLD
}

model ProjectsEntity {
  id          String                   @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime                 @default(now()) @db.DateTime(6)
  updatedDate DateTime                 @updatedAt
  deletedDate DateTime?                @db.DateTime(6)
  title       String                   @db.VarChar(255)
  body        String                   @db.LongText
  status      ProjectStatus?
  deletable   Boolean                  @default(true) @db.TinyInt
  cloneable   Boolean                  @default(true) @db.TinyInt
  progress    Int?
  rollupData  Json?                    @db.Json
  assignee    ProjectsAssigneeEntity[] @relation("projectsAssignee")
  comments    CommentEntity[]          @relation("projectComments")
  hero        MediaAsset?              @relation("projectHeroMedia")
  summary     ProjectSummaryEntity?    @relation("projectSummary")
}

model ProjectSummaryEntity {
  id                String         @id @default(uuid()) @db.VarChar(36)
  createdDate       DateTime       @default(now()) @db.DateTime(6)
  updatedDate       DateTime       @updatedAt
  deletedDate       DateTime?      @db.DateTime(6)
  endDate           DateTime?      @db.DateTime(6)
  startDate         DateTime?      @db.DateTime(6)
  project_id        String         @unique @db.VarChar(36)
  project           ProjectsEntity @relation("projectSummary", fields: [project_id], references: [id])
  reporting_user_id String         @db.VarChar(36)
  reporter          UserEntity     @relation("reportingUser", fields: [reporting_user_id], references: [id])
  budget            Int?           @db.Int
  logged            String?        @db.VarChar(255)
  estimated         String?        @db.VarChar(255)
}

model ProjectsAssigneeEntity {
  id          String         @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime       @default(now()) @db.DateTime(6)
  updatedDate DateTime       @updatedAt
  deletedDate DateTime?      @db.DateTime(6)
  projectsId  String         @db.VarChar(36)
  project     ProjectsEntity @relation("projectsAssignee", fields: [projectsId], references: [id])
  userId      String         @db.VarChar(36)
  user        UserEntity     @relation("assigneeUser", fields: [userId], references: [id])
}

model RolesEntity {
  id              String            @id @default(uuid()) @db.VarChar(36)
  createdDate     DateTime          @default(now()) @db.DateTime(6)
  updatedDate     DateTime          @updatedAt
  deletedDate     DateTime?         @db.DateTime(6)
  role            String            @unique @db.VarChar(255)
  userRoles       UserRolesEntity[] @relation("userRoles")
  RoleMenusEntity RoleMenusEntity[] @relation("roleMenuRoles")
}

model UserEntity {
  id                     String    @id @default(uuid()) @db.VarChar(36)
  username               String    @unique @db.VarChar(255)
  email                  String    @db.VarChar(255)
  password               String    @db.VarChar(255)
  firstName              String    @db.VarChar(255)
  lastName               String    @db.VarChar(255)
  passwordResetNeeded    Boolean?  @db.TinyInt
  passwordResetToken     String?   @unique @db.VarChar(255)
  lastPasswordUpdateDate DateTime? @db.DateTime(0)
  emailVerified          Boolean   @default(false) @db.TinyInt
  emailVerifyToken       String?   @unique @db.VarChar(255)
  phone                  String?   @db.VarChar(255)
  phoneVerifyToken       String?   @db.VarChar(255)
  suspended              Boolean   @default(false) @db.TinyInt
  lastLogin              DateTime? @db.DateTime(0)
  deletedDate            DateTime? @db.DateTime(6)
  createdDate            DateTime  @default(now()) @db.DateTime(6)
  updatedDate            DateTime  @updatedAt

  userHistory              UserEventsEntity[]       @relation("targetUser")
  userActivity             UserEventsEntity[]       @relation("actingUser")
  userRoles                UserRolesEntity[]        @relation("userEntity")
  userTags                 UserTagsEntity[]         @relation("userTags")
  projects                 ProjectsAssigneeEntity[] @relation("assigneeUser")
  reportedProjects         ProjectSummaryEntity[]   @relation("reportingUser")
  comments                 CommentEntity[]          @relation("commentAuthor")
  avatar                   MediaAsset?              @relation("userProfileImage")
  profile                  ProfileEntity?           @relation("userProfile")
  socialUserFollower       SocialUserFollower[]     @relation("follower")
  socialUserFollowing      SocialUserFollower[]     @relation("following")
  socialStory              SocialStory[]
  socialStoryUserLike      SocialStoryUserLike[]    @relation("storyUserLikeUser")
  socialActivities         SocialActivity[]         @relation("socialActivityOperator")
  socialActivitiesAsTarget SocialActivity[]         @relation("socialActivityTargetUser")
  appointments             Appointment[]            @relation("AppointmentUser")
  CommentUserLike          CommentUserLike[]        @relation("commentUserLikeUser")
  notifications            Notification[]           @relation("NotificationUser")
}

model UserEventsEntity {
  id             String      @id @default(uuid()) @db.VarChar(36)
  event          String      @db.VarChar(255)
  createdDate    DateTime    @default(now()) @db.DateTime(6)
  updatedDate    DateTime    @updatedAt
  deletedDate    DateTime?   @db.DateTime(6)
  target_user_id String?     @db.VarChar(36)
  acting_user_id String?     @db.VarChar(36)
  targetUser     UserEntity? @relation("targetUser", fields: [target_user_id], references: [id])
  actingUser     UserEntity? @relation("actingUser", fields: [acting_user_id], references: [id])
}

model UserRolesEntity {
  id          String      @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime    @default(now()) @db.DateTime(6)
  updatedDate DateTime    @updatedAt
  deletedDate DateTime?   @db.DateTime(6)
  role_id     String      @db.VarChar(36)
  rolesEntity RolesEntity @relation("userRoles", fields: [role_id], references: [id])
  user_id     String      @db.VarChar(36)
  userEntity  UserEntity  @relation("userEntity", fields: [user_id], references: [id])

  @@unique([user_id, role_id])
}

model UserTagsEntity {
  id          String     @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime   @default(now()) @db.DateTime(6)
  updatedDate DateTime   @updatedAt
  deletedDate DateTime?  @db.DateTime(6)
  user_id     String     @db.VarChar(36)
  userEntity  UserEntity @relation("userTags", fields: [user_id], references: [id])
  tag_id      String     @db.VarChar(36)
  tagsEntity  TagsEntity @relation("tags", fields: [tag_id], references: [id])

  @@unique([user_id, tag_id])
}

model TagsEntity {
  id          String           @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime         @default(now()) @db.DateTime(6)
  updatedDate DateTime         @updatedAt
  deletedDate DateTime?        @db.DateTime(6)
  name        String           @unique @db.VarChar(255)
  userTags    UserTagsEntity[] @relation("tags")
}

model MediaAsset {
  id          String          @id @default(uuid()) @db.VarChar(36)
  createdDate DateTime        @default(now()) @db.DateTime(6)
  updatedDate DateTime        @updatedAt
  deletedDate DateTime?       @db.DateTime(6)
  type        String          @db.VarChar(255)
  src         String          @db.VarChar(255)
  src_webp    String?         @db.VarChar(255)
  alt         String          @db.VarChar(255)
  profile_id  String?         @db.VarChar(36)
  project_id  String?         @db.VarChar(36)
  user_id     String?         @db.VarChar(36)
  story_id    String?         @db.VarChar(36)
  profile     ProfileEntity?  @relation("profileImage", fields: [profile_id], references: [id])
  project     ProjectsEntity? @relation("projectHeroMedia", fields: [project_id], references: [id])
  user        UserEntity?     @relation("userProfileImage", fields: [user_id], references: [id])
  story       SocialStory?    @relation("storyImage", fields: [story_id], references: [id])

  @@unique([src, alt], name: "src_alt_unique_constraint")
  @@unique([profile_id, alt], name: "profile_alt_unique_constraint")
  @@unique([project_id, alt], name: "project_alt_unique_constraint")
  @@unique([story_id, alt], name: "story_alt_unique_constraint")
}

model MenusEntity {
  id              String            @id @default(uuid()) @db.VarChar(36)
  createdDate     DateTime          @default(now()) @db.DateTime(6)
  updatedDate     DateTime          @updatedAt
  deletedDate     DateTime?         @db.DateTime(6)
  key             String            @unique @db.VarChar(255)
  name            String            @db.VarChar(255)
  isMega          Boolean           @db.TinyInt
  route           String?           @db.VarChar(255)
  icon            String?           @db.VarChar(255)
  parentId        String?           @db.VarChar(36)
  parentMenu      MenusEntity?      @relation("menu", fields: [parentId], references: [id])
  Menu            MenusEntity[]     @relation("menu")
  RoleMenusEntity RoleMenusEntity[] @relation("roleMenuMenus")
}

model RoleMenusEntity {
  id          String      @id @default(uuid()) @db.VarChar(36)
  roleId      String      @db.VarChar(36)
  menuId      String      @db.VarChar(36)
  rolesEntity RolesEntity @relation("roleMenuRoles", fields: [roleId], references: [id])
  menusEntity MenusEntity @relation("roleMenuMenus", fields: [menuId], references: [id])

  @@unique([roleId, menuId])
}

model SocialUserFollower {
  id          String    @id @default(uuid()) @db.VarChar(36)
  userId      String    @db.VarChar(36)
  followerId  String    @db.VarChar(36)
  createdDate DateTime  @default(now()) @db.DateTime(6)
  deletedDate DateTime? @db.DateTime(6)

  user     UserEntity @relation("following", fields: [userId], references: [id])
  follower UserEntity @relation("follower", fields: [followerId], references: [id])

  @@unique([userId, followerId])
}

model SocialStory {
  id          String     @id @default(uuid()) @db.VarChar(36)
  userId      String     @db.VarChar(36)
  user        UserEntity @relation(fields: [userId], references: [id])
  content     String     @db.Text
  createdDate DateTime   @default(now()) @db.DateTime(6)
  deletedDate DateTime?  @db.DateTime(6)

  mediaAsset          MediaAsset[]          @relation("storyImage")
  socialStoryUserLike SocialStoryUserLike[] @relation("storyUserLikeStory")
  comments            CommentEntity[]       @relation("storyComments")
  activities          SocialActivity[]      @relation("socialActivityStory")
}

model SocialStoryUserLike {
  id          String    @id @default(uuid()) @db.VarChar(36)
  storyId     String    @db.VarChar(36)
  userId      String    @db.VarChar(36)
  createdDate DateTime  @default(now()) @db.DateTime(6)
  deletedDate DateTime? @db.DateTime(6)

  story SocialStory @relation("storyUserLikeStory", fields: [storyId], references: [id])
  user  UserEntity  @relation("storyUserLikeUser", fields: [userId], references: [id])

  @@unique([storyId, userId])
}

enum SocialActivityAction {
  FOLLOWED
  UNFOLLOWED
  POST_STORY
  LIKED_STORY
  UNLIKED_STORY
}

model SocialActivity {
  id                  Int                  @id @default(autoincrement())
  operatorId          String               @db.VarChar(36)
  operatorFullName    String               @db.VarChar(255)
  operatorAvatarSrc   String               @db.VarChar(255)
  action              SocialActivityAction
  targetUserId        String?              @db.VarChar(36)
  targetUserFullName  String?              @db.VarChar(255)
  targetUserAvatarSrc String?              @db.VarChar(255)
  storyId             String?              @db.VarChar(36)
  createdDate         DateTime             @default(now()) @db.DateTime(6)
  deletedDate         DateTime?            @db.DateTime(6)

  operator   UserEntity   @relation("socialActivityOperator", fields: [operatorId], references: [id])
  targetUser UserEntity?  @relation("socialActivityTargetUser", fields: [targetUserId], references: [id])
  story      SocialStory? @relation("socialActivityStory", fields: [storyId], references: [id])
}

model CryptoMainInfo {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(36)
  price     Decimal @db.Decimal(65, 30)
  priceByUS Decimal @db.Decimal(65, 30)
  volume    Decimal @db.Decimal(65, 30)
  change    Decimal @db.Decimal(5, 3)
}

model CryptoMarkets {
  id     Int     @id @default(autoincrement())
  coin   String  @db.VarChar(36)
  price  Decimal @db.Decimal(65, 30)
  volume Decimal @db.Decimal(65, 30)
  change Decimal @db.Decimal(5, 3)
}

enum CryptoOrderType {
  BUY
  SELL
}

model CryptoOrders {
  id    Int             @id @default(autoincrement())
  type  CryptoOrderType
  price Decimal         @db.Decimal(65, 30)
  eth   Decimal         @db.Decimal(65, 30)
  btc   Decimal         @db.Decimal(65, 30)
  sum   Decimal         @db.Decimal(65, 30)
}

model CryptoValueHistory {
  id    Int      @id @default(autoincrement())
  date  DateTime @db.DateTime(6)
  open  Decimal  @db.Decimal(65, 30)
  close Decimal  @db.Decimal(65, 30)
  high  Decimal  @db.Decimal(65, 30)
  low   Decimal  @db.Decimal(65, 30)
}

model City {
  id        String @id @default(uuid()) @db.VarChar(36)
  cityName  String @db.VarChar(255)
  longitude Float  @db.Float
  latitude  Float  @db.Float

  analytics AnalyticByCity[] @relation("analyticCity")
}

model Language {
  id       String @id @default(uuid()) @db.VarChar(36)
  language String @unique @db.VarChar(255)

  analytics AnalyticByLanguage[] @relation("analyticLanguage")
}

model AnalyticOverview {
  id            String   @id @default(uuid()) @db.VarChar(36)
  date          DateTime @db.Date
  bounce        Decimal
  bounceRatio   Decimal
  realTime      Decimal
  realTimeRatio Decimal
  visitors      Decimal
  visitorsRatio Decimal
}

model AnalyticByCity {
  id     String   @id @default(uuid()) @db.VarChar(36)
  date   DateTime @db.Date
  cityId String   @db.VarChar(36)
  value  Int      @db.Int

  city City @relation("analyticCity", fields: [cityId], references: [id])
}

model AnalyticByLanguage {
  id         String   @id @default(uuid()) @db.VarChar(36)
  date       DateTime @db.Date
  languageId String   @db.VarChar(36)
  value      Int      @db.Int

  language Language @relation("analyticLanguage", fields: [languageId], references: [id])
}

model AnalyticByPlatformMonthly {
  id      String   @id @default(uuid()) @db.VarChar(36)
  month   DateTime @db.Date
  mobile  Int      @db.Int
  desktop Int      @db.Int
}

model AnalyticByInterest {
  id         String   @id @default(uuid()) @db.VarChar(36)
  date       DateTime @db.Date
  interest   String   @db.VarChar(255)
  percentage Int      @db.Int
}

model AnalyticRevenueBySource {
  id      String   @id @default(uuid()) @db.VarChar(36)
  date    DateTime @db.Date
  source  String   @db.VarChar(255)
  revenue Int      @db.Int
}

model AnalyticByTraffic {
  id              String   @id @default(uuid()) @db.VarChar(36)
  date            DateTime @db.Date
  source          String   @db.VarChar(255)
  userCount       Int      @db.Int
  sessionCount    Int      @db.Int
  bounceRate      Decimal  @db.Decimal(65, 30)
  sessionDuration Int      @db.Int /// unit: seconds
}

model DashboardDefaultOverview {
  id            String   @id @default(uuid()) @db.VarChar(36)
  date          DateTime @db.Date
  totalEarnings Decimal  @db.Decimal(65, 30)
  pendingOrders Int      @db.Int
  totalRevenue  Decimal  @db.Decimal(65, 30)
}

model DashboardDefaultMonthlyRevenue {
  id      String   @id @default(uuid()) @db.VarChar(36)
  month   DateTime @db.Date
  revenue Decimal  @db.Decimal(65, 30)
}

model DashboardDefaultDailyRevenue {
  id      String   @id @default(uuid()) @db.VarChar(36)
  date    DateTime @db.Date
  source  String   @db.VarChar(255)
  revenue Decimal  @db.Decimal(65, 30)
}

model Appointment {
  id          String   @id @default(uuid()) @db.VarChar(36)
  userId      String   @db.VarChar(36)
  title       String   @db.VarChar(255)
  content     String   @db.VarChar(255)
  createdDate DateTime @default(now()) @db.DateTime(6)

  user UserEntity @relation("AppointmentUser", fields: [userId], references: [id])
}

enum NotificationType {
  COMMENT
  REPLY_COMMENT
  LIKE_COMMENT
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      String           @db.VarChar(36)
  type        NotificationType
  extras      Json?            @db.Json
  read        Boolean          @db.TinyInt
  readDate    DateTime?        @db.DateTime(6)
  createdDate DateTime         @default(now()) @db.DateTime(6)
  deletedDate DateTime?        @db.DateTime(6)

  user UserEntity @relation("NotificationUser", fields: [userId], references: [id])
}
